1.
Да.


2.
Все групповые функции, кроме COUNT(*), 
игнорируют неопределённые значения. 


3.
4.
SELECT	TO_CHAR(MAX(salary), '$999,999.00') AS max
, 	TO_CHAR(MIN(salary), '$999,999.00') AS min
, 	TO_CHAR(SUM(salary), '$999,999.00') AS sum
, 	TO_CHAR(AVG(salary), '$999,999.00') AS avg
FROM	employees;


5.
SELECT	job_id
,	TO_CHAR(MAX(salary), '$999,999.00') AS max
,	TO_CHAR(MIN(salary), '$999,999.00') AS min
,	TO_CHAR(SUM(salary), '$999,999.00') AS sum
,	TO_CHAR(AVG(salary), '$999,999.00') AS avg
FROM	employees
GROUP BY job_id
ORDER BY job_id;


6.
SELECT	job_id
,	COUNT(job_id)
FROM	employees
GROUP BY job_id;


7.
SELECT	COUNT(DISTINCT(manager_id)) AS "Number of Managers"
FROM	employees
WHERE	manager_id IS NOT null;


8.
SELECT	TO_CHAR(MAX(salary), '$999,999.00') AS max
, 	TO_CHAR(MIN(salary), '$999,999.00') AS min
,	TO_CHAR(MAX(salary) - MIN(salary), '$999,999.00') AS difference
FROM 	employees;


9.
SELECT  manager_id, MIN (salary) min_salary
FROM 	employees
WHERE 	manager_id IS NOT NULL
HAVING 	MIN(salary) > 6000
GROUP BY manager_id
ORDER BY min_salary DESC;


10.
SELECT	d.department_name "Name"
, 	d.location_id "Location"
, 	COUNT (employee_id) "Number of People"
, 	ROUND (AVG (salary), 0) "Salary"
FROM departments d 
JOIN employees e
USING (department_id)
GROUP BY d.department_name, d.location_id;


11.
SELECT  COUNT (*) AS total
,	SUM (DECODE (TO_CHAR (hire_date, 'YYYY'), 2005, 1)) AS "2005"
,	SUM (DECODE (TO_CHAR (hire_date, 'YY'), 06, 1)) AS "2006"
,	SUM (DECODE (TO_CHAR (hire_date, 'YY'), 07, 1)) AS "2007"
,	SUM (DECODE (TO_CHAR (hire_date, 'YY'), 08, 1)) AS "2008"
FROM employees;


12.
SELECT  job_id AS job
,	SUM (DECODE (department_id, 20, salary)) AS "Dept20"
,	SUM (DECODE (department_id, 50, salary)) AS "Dept50"
,	SUM (DECODE (department_id, 80, salary)) AS "Dept80"
,	SUM (DECODE (department_id, 90, salary)) AS "Dept90"
,	SUM (salary) AS total
FROM employees
GROUP BY job_id;