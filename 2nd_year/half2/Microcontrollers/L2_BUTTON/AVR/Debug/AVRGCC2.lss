
AVRGCC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  0000013e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000036  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000f0  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000006e  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000120  00000000  00000000  00000a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000020  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000a1  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000c25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	40 c0       	rjmp	.+128    	; 0xc6 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
unsigned char t, t1, t2, t3;

// B5 = (B1 | B2) ^ B3
 
 void main(void)
 {
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	cd b7       	in	r28, 0x3d	; 61
  4e:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0b00100000;
  50:	87 e3       	ldi	r24, 0x37	; 55
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	20 e2       	ldi	r18, 0x20	; 32
  56:	fc 01       	movw	r30, r24
  58:	20 83       	st	Z, r18
   PORTB = 0b00001110;
  5a:	88 e3       	ldi	r24, 0x38	; 56
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	2e e0       	ldi	r18, 0x0E	; 14
  60:	fc 01       	movw	r30, r24
  62:	20 83       	st	Z, r18
   
   while(1)
   {
     t1 = PINB << 4; //B1
  64:	86 e3       	ldi	r24, 0x36	; 54
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	fc 01       	movw	r30, r24
  6a:	80 81       	ld	r24, Z
  6c:	82 95       	swap	r24
  6e:	80 7f       	andi	r24, 0xF0	; 240
  70:	80 93 63 00 	sts	0x0063, r24
     t2 = PINB << 3; //B2
  74:	86 e3       	ldi	r24, 0x36	; 54
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	fc 01       	movw	r30, r24
  7a:	80 81       	ld	r24, Z
  7c:	88 0f       	add	r24, r24
  7e:	88 0f       	add	r24, r24
  80:	88 0f       	add	r24, r24
  82:	80 93 62 00 	sts	0x0062, r24
     t3 = PINB << 2; //B3
  86:	86 e3       	ldi	r24, 0x36	; 54
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	fc 01       	movw	r30, r24
  8c:	80 81       	ld	r24, Z
  8e:	88 0f       	add	r24, r24
  90:	88 0f       	add	r24, r24
  92:	80 93 61 00 	sts	0x0061, r24
     t = (t1 | t2) ^ t3;
  96:	90 91 63 00 	lds	r25, 0x0063
  9a:	80 91 62 00 	lds	r24, 0x0062
  9e:	98 2b       	or	r25, r24
  a0:	80 91 61 00 	lds	r24, 0x0061
  a4:	89 27       	eor	r24, r25
  a6:	80 93 60 00 	sts	0x0060, r24
	
    PORTB = PORTB & 0b11011111 | t;//& 0b00100000;
  aa:	88 e3       	ldi	r24, 0x38	; 56
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	28 e3       	ldi	r18, 0x38	; 56
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	20 81       	ld	r18, Z
  b6:	32 2f       	mov	r19, r18
  b8:	3f 7d       	andi	r19, 0xDF	; 223
  ba:	20 91 60 00 	lds	r18, 0x0060
  be:	23 2b       	or	r18, r19
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
    //_delay_ms(500);
   }
  c4:	cf cf       	rjmp	.-98     	; 0x64 <main+0x1c>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
